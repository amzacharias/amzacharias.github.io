{\rtf1\ansi\deff0{\fonttbl{\f0 \fswiss Helvetica;}{\f1 \fmodern Courier;}}
{\colortbl;\red255\green0\blue0;\red0\green0\blue255;}
\widowctrl\hyphauto

{\pard \qc \f0 \sa180 \li0 \fi0 \b \fs36 Introduction to R\par}
{\pard \qc \f0 \sa180 \li0 \fi0  Amanda Zacharias\par}
{\pard \qc \f0 \sa180 \li0 \fi0  July 31 2023\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \par}
{\pard \ql \f0 \sa180 \li0 \fi0 This page provides an overview of R syntax. Try to code along!\par}
{\pard \ql \f0 \sa180 \li720 \fi0 For beginners: The help tab in the bottom right corner of RStudio is your best friend! Use it often\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \outlinelevel0 \b \fs36 Basic math\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 1 + 2 # addition\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ## [1] 3\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 1 - 2 # subtraction\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ## [1] -1\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 1 * 2 # multiplication\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ## [1] 2\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 1 / 2 # divition\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ## [1] 0.5\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 1^2 # exponentiation\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ## [1] 1\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 exp(2) # exponentiation (natural)\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ## [1] 7.389056\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 log(2) # logarithm (natural)\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ## [1] 0.6931472\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 log2(2) # logarithm (base 2)\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ## [1] 1\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 log10(2) # logarithm (base 10)\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ## [1] 0.30103\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 log(exp(2)) # log() and exp() cancel each other out\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ## [1] 2\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 abs(-2) # absolute value\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ## [1] 2\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \outlinelevel0 \b \fs36 Rounding\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 round(1.1387, digits = 2) # round up\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ## [1] 1.14\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 floor(1.1387) # lower integer\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ## [1] 1\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ceiling(1.1387) # higher integer\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ## [1] 2\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 signif(1.1387, digits = 2) # significant digits\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ## [1] 1.1\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \outlinelevel0 \b \fs36 Logic\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 1 > 2 # greater\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ## [1] FALSE\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 1 < 2 # less \par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ## [1] TRUE\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 1 >= 2 # greater or equal\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ## [1] FALSE\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 1 <= 2 # less or equal\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ## [1] TRUE\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 1 == 2 # equal\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ## [1] FALSE\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 1 != 2 # not equal\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ## [1] TRUE\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 TRUE | FALSE # OR\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ## [1] TRUE\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 FALSE | FALSE # OR \par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ## [1] FALSE\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 TRUE & FALSE # AND\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ## [1] FALSE\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 TRUE & TRUE # AND\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ## [1] TRUE\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \outlinelevel0 \b \fs36 Assigning and viewing variables\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Generally {\f1 <-} is used to assign variables and {\f1 =} is used to assign parameters in functions.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 # Assign\line
a <- 1\line
b <- 2\line
c <- a + b\line
\line
# View\line
a # directly type the variable\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ## [1] 1\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 print(a) # print to console, and return invisibly (not great inside functions)\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ## [1] 1\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 paste(a) # convert to string, can be used to write to console but not often\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ## [1] "1"\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 cat(a) # concatenate and print; no fancy formatting but my preferred approach\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ## 1\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \outlinelevel0 \b \fs36 Combining elements\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 # Vectors\line
x <- c("a", "b", "c", "d")\line
x\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ## [1] "a" "b" "c" "d"\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 y = c("a", "c", 2, "e")\line
y\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ## [1] "a" "c" "2" "e"\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 # Lists\line
lst <- list(x, y)\line
lst\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ## [[1]]\line
## [1] "a" "b" "c" "d"\line
## \line
## [[2]]\line
## [1] "a" "c" "2" "e"\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 namedLst <- list("x" = x, "y" = y)\line
namedLst\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ## $x\line
## [1] "a" "b" "c" "d"\line
## \line
## $y\line
## [1] "a" "c" "2" "e"\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 # Dataframes\line
df <- data.frame("x" = x, \line
                 "y" = y)\line
df\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ##   x y\line
## 1 a a\line
## 2 b c\line
## 3 c 2\line
## 4 d e\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \outlinelevel0 \b \fs36 Indexing by numbers\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 # Vectors and lists\line
x[0] # R is 1-based!\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ## character(0)\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 x[1]\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ## [1] "a"\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 x[-1]\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ## [1] "b" "c" "d"\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 x[length(x) - 1]\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ## [1] "c"\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 namedLst[1]\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ## $x\line
## [1] "a" "b" "c" "d"\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 namedLst[[1]]\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ## [1] "a" "b" "c" "d"\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 # Dataframes\line
df[1, ]\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ##   x y\line
## 1 a a\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 df[1:2, ]\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ##   x y\line
## 1 a a\line
## 2 b c\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 df[, 1]\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ## [1] "a" "b" "c" "d"\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \outlinelevel0 \b \fs36 Indexing by names\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 # String \line
namedLst["x"]\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ## $x\line
## [1] "a" "b" "c" "d"\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 namedLst[["x"]]\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ## [1] "a" "b" "c" "d"\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 df["x"]\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ##   x\line
## 1 a\line
## 2 b\line
## 3 c\line
## 4 d\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 # $\line
namedLst$x\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ## [1] "a" "b" "c" "d"\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 df$x\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ## [1] "a" "b" "c" "d"\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 # Range of numbers ======\line
1:10\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ##  [1]  1  2  3  4  5  6  7  8  9 10\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 1:length(x)\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ## [1] 1 2 3 4\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 seq(1 ,10 , 2)\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ## [1] 1 3 5 7 9\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \outlinelevel0 \b \fs36 Random\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 set.seed(0)\line
runif(5)\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ## [1] 0.8966972 0.2655087 0.3721239 0.5728534 0.9082078\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 sample(1:10, 1)\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ## [1] 2\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \outlinelevel0 \b \fs36 Is x in y?\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 x %in% y # literally "is x in y?"\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ## [1]  TRUE FALSE  TRUE FALSE\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 match(x, y) # where is x first in y ? \par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ## [1]  1 NA  2 NA\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 match(c("a", "c"), c("a", "a", "b"))\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ## [1]  1 NA\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \outlinelevel0 \b \fs36 If else\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 num <- 10\line
if (num < 10)\{\line
  print("lesser")\line
\} else if (num > 10)\{\line
  print("greater")\line
\} else if (num == 10)\{\line
  print('equal')\line
\}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ## [1] "equal"\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \outlinelevel0 \b \fs36 Functions\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 # Simple function\line
HelloWorld <- function(arg1, arg2="world")\{\line
  #' This function prints arg1 and arg2 to the console\line
  #' \line
  #' @param arg1 First string\line
  #' @param arg2 Second string\line
  #' @return Prints a message to the console\line
  #' @example\line
  #' HelloWorld("Hello")\line
  cat(arg1, arg2)\line
  return(arg1)\line
\}\line
HelloWorld("Hello")\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ## Hello world\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ## [1] "Hello"\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 # Addition\line
Add <- function(num1, num2)\{\line
  #' This function adds two numbers together\line
  #'\line
  #' @param num1 A number\line
  #' @param num2 A second number\line
  #' @return Returns the sum of the two numbers\line
  sum <- num1 + num2\line
  return(sum)\line
\}\line
Add(1, 2)\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ## [1] 3\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \outlinelevel0 \b \fs36 Loops\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 # For \line
for (obj in x)\{\line
  print(obj)\line
\}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ## [1] "a"\line
## [1] "b"\line
## [1] "c"\line
## [1] "d"\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 for (idx in 1:length(x))\{\line
  print(idx)\line
  print(x[idx])\line
\}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ## [1] 1\line
## [1] "a"\line
## [1] 2\line
## [1] "b"\line
## [1] 3\line
## [1] "c"\line
## [1] 4\line
## [1] "d"\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 # While\line
idx <- 1\line
while (idx <= length(x))\{\line
  print(idx)\line
  print(x[idx])\line
  idx = idx + 1\line
\}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ## [1] 1\line
## [1] "a"\line
## [1] 2\line
## [1] "b"\line
## [1] 3\line
## [1] "c"\line
## [1] 4\line
## [1] "d"\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \outlinelevel0 \b \fs36 Working directory\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 getwd()\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ## [1] "/Users/amandazacharias/Documents/amzacharias.github.io/tutorials"\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 #setwd()\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \outlinelevel0 \b \fs36 Input/Output\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 # Common input functions\line
csv <- read.csv("foo.csv")\line
table <- read.table("foo.txt", header = TRUE)\line
\line
# Common output functions\line
write.csv(csv, "practice.csv")\line
write.table(table, "practice.txt")\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \outlinelevel0 \b \fs36 Install packages\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 # Install CRAN\line
# install.packages("dplyr")\line
\line
# Install Bioconductor\line
# if (!require("BiocManager", quietly = TRUE))\{\line
#   install.packages("BiocManager")\line
# \}\line
# BiocManager::install("dplyr")\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 # Load\line
library("dplyr") # version 1.1.2\line
# Inspect version\line
packageVersion("dplyr")\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ## [1] '1.1.2'\par}
}
